COMMANDS
  $sublime
    select and '' - to put into quotes
  $linux tutorial
      sudo fuser -k 8000/tcp - kill process on 8000 port
      pwd - path to the dir, when you are at the current moment
      ls - all of the contents of this directory
      ls -l - detail info
      sudo su(su sonysevent) - superuser mode(back to the user mode)
      cd ~/Downloads - change faster dirs
      sudo dpkg -i ./name_of_file
      
  $postgresql
      Ctrl+L - clear screen
      sudo -u postgres psql
  $mysql
      sudo mysql -u root -p
      show databases;
      DESC subscribers; - table look
      show tables

  chrome://downloads/
------------------------------------------------------------

GENERATOR, ITERATOR
  $Генератори, ітератори, list comprehensive
    A Python generator is a piece of specialized code able to
    produce a series of values, and to control the iteration process.
    This is why generators are very often called iterators, and although
    some may find a very subtle distinction between these two, we'll treat them as one.

    for i in range(5):
        print(i)
    The range() function is, in fact, a generator,
    which is (in fact, again) an iterator

    The iterator protocol is a way in which an object should behave to
    conform to the rules imposed by the context of the for and in statements.
    An object conforming to the iterator protocol is called an iterator.


    def Fib(n):
        p = pp = 1
        for i in range(n):
            if i in [0, 1]:
                yield i
            else:
                n = p + pp
                pp, p = p, n
                yield n


    fibs = list(Fib(10))

    lst = [1 if x%2 == 0 else 0 for x in range(10)]
    genr = (1 if x%2 == 0 else 0 for x in range(10))
-----------------------------------------------------------
FUNCTIONS
  $Хеш функція
    Алгоритм, який переводить стр довільної довжини у фіксовану
    Має бути послідовною, коли щось передаємо і отримуємо, надалі має
    бути для інших значень
    Хеш табл утв за доп dict(), чудовий алго SHA, хешування є одностороннім
    bcrypt - passwords, Simdash - плагіат, дублікати Google
    Хеш-функции получают на входе данные разного объема, а возвращают хеш фиксированной
    длины. Набор данных может пройти через такую функцию много раз, но результат
    для него будет одинаковым. И наоборот, для наборов, отличающихся хотя бы одним
    символом, коды всегда разные.

  $Декоратори
    from datetime import datetime
    def timeit(function):
        def wrapper(*args, **kwargs):
            start = datetime.now()
            result = function(*args, **kwargs)
            print(datetime.now() - start)
            return result
        return wrapper


    @timeit
    def two(*args):
        list_ = [x for x in range(10**4) if x%2 == 0]
        return list_


    def logging(function):
        def wrapper(*args, **kwargs):
            result = function(*args, **kwargs)
            with open('my_file', 'a') as file:
                file.write(
                    'function name: {func_name} with results = {result}.\
                    Start at {start_time}'.format(
                        func_name=function.__name__,
                        result=result,
                        start_time=time.ctime(time.time())
                    )
                )
                file.close()
                return result
        return wrapper


    @logging
    def summary(x, y, z):
        return x+y+z


    def makeclosure(par):
      loc = par
      def power(p):
        return p ** loc
      return power


    fsqr = makeclosure(2)  # par == loc
    fcub = makeclosure(3)  # p
    for i in range(3):
      print(i, fsqr(i), fcub(i))  # 0 0 0
                                  # 1 1 1
                                  # 2 4 8


  $lambda, map(), filter()
    foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]
    print(list(filter(lambda x: x % 3 == 0, foo)))  # [18, 9, 24, 12, 27]
    print(list(map(lambda x: x * 2 + 10, foo)))  # [14, 46, 28, 54, 44, 58, 26, 34, 64]
    fib = lambda x: 1 if x <= 2 else fib(x-1) + fib(x-2)  # fib(31) => 1346269


    def my_print(args, function):
        for x in args:
            print('f(", x,")=', function(x), sep='')


    my_print([x for x in range(-2, 3)], lambda x: 2 * x**2 - 4 * x + 2)

    map()
      The function applies the function passed by its first argument to all
      its second argument's elements, and returns an iterator delivering all
      subsequent function results.
      list1 = [x for x in range(5)]
      list2 = list(map(lambda x: 2 ** x, list1))
      print(list2)

    filter()
      to expects the same kind of arguments as map(), but does something different - it
      filters its second argument while being guided by directions flowing from the
      function specified as the first argument (the function is invoked for each list
      element, just like in map()).
      data = [ randint(-10, 10) for x in range(5) ]
      filtered = list(filter(lambda x: x>0 and x%2 == 0, data))


  $Name spaces
    # $Name spaces
    # if, elif, else, cycles don't create local scope
    def a():
      print(x)


    def b():
      x = 31
      a()


    b()  # NameError: name 'x' is not defined


    def print_value():
        print(a)


    a = 5
    print_value()  # 5


    def print_value():
        print(a)
        a = 10
        print(a)


    a = 5
    print_value()  # UnboundLocalError: local variable 'a' referenced before assignment

   # global, nonlocal
    x = 11  # global
    def g1():
      print(x)  # 11


    def g2():
      global x
      x = 22  # change x in global to 22


    def h1():
      x = 33

      def nested():
        print(x)  # local 33

      nested()


    def h2():
      x = 33

      def nested():
        nonlocal x
        x = 44
        print(x)

      nested()  # change x to 44


    g1()  # prints global x; 11
    g2()  # change x in global to 22
    print(x)  # 22
    h1()  # local 33 in E(enclosure) of LEGB
    h2()  # change local name in E(enclosure) x to 44


   # Nested classes
    x = 1
    def nester():
      print(x)  # Global name: 1

      class C:
        print(x)  # Global name: 1

        def method_1(self):
          print(x)  # Global name: 1

        def method_2(self):
          x = 3  # Hide global name
          print(x)  # Local name: 3


      I = C()
      I.method_1()  # Global name: 1
      I.method_2()  # Hide global name; local name: 3


    print(x)  # global x: 1
    nester()

    x = 1
    def nester():
      x = 2  # Hide global name
      print(x)  # 2

      class C:
        print(x)  # In enclouse def (nester): 2
       
        def method_1(self):
          print(x)  # In enclouse def (nester): 2
        
        def method_2(self):
          x = 3  # Hide name from enclouse def (nester)
          print(x)  # Local name: 3
      

      I = C()
      I.method_1()  # In enclouse def (nester): 2
      I.method_2()  # Hide name from enclouse def (nester); local name: 3


    print(x)  # global x: 1
    nester()

    x = 1
    def nester():
      x = 2  # Hide global name
      print(x) # Local name: 2

      class C:
        x = 3  # Local name from class hides name from nester
        print(x)  # Local name: 3

        def method_1(self):
          print(x)  # In enclose def(not 3 in class): 2
          print(self.x)  # Inharit local name from class: 3
        
        def method_2(self):
          x = 4  # Hide enclose name from nester, not class
          print(x)  # Local name: 4
          self.x = 5  # Hide name from class
          print(self.x)  # Is in object: 5
      
      I = C()
      I.method_1()
      I.method_2()


    print(x)
    nester()


  $Recursion
    def fib(x):
      if x == 0 or x == 1:
          return 1
      return fib(x-1) + fib(x-2)
# -------------------------------------------------------------------------------------------

JSON
  str_json = '''
  {
  "response": {
      "count": 5961878,
      "items": [
      {
          "first_name": "Oleh",
          "id": 620471795,
          "last_name": "Сопова",
          "can_access_closed": true
      }
      ]
    }
  }
  '''

  data = json.loads(str_json)  # When read sting; load() - when read f;
  for i in data['response']['items']:
      print(i)
      del i['id']
      i['likes'] = randint(100, 200)
      i['date'] = datetime.now().strftime('%d/%m/%y')
  new_json = json.dumps(data, indent=4)

  with open('example.json', 'r') as f:
      data_again = json.load(f)
  print(sum(data_again[1]["scores"]))

  with open('my_json.json', 'w') as f:  # Write to json
      json.dump(data, f, indent=4, sort_keys=True)
  with open('my_json.json') as f:
      data = json.load(f)

CSV
  import csv
    with open('names.csv') as csv_file:
        csv_reader = csv.reader(csv_file)
        with open('new_names.csv', 'w') as new_file:
            csv_writer = csv.writer(new_file, delimiter=',')
            for i in csv_reader:
                csv_writer.writerow(i)
            # csv_writer.writerows(array)

  f = open('text.txt', 'r')
  for line in f:
    line = line.rstrip()
    print(repr(line))
----------------------------------------------------------

NETWORK
    DNS
      Domain Name System, DNS зв'язує доменні імена з IP-адресами(vk.com - 87.240.131.117)
    MAC
      Ім'я приладу фізичне
    HTTP
      Протокол передачі гіпертексту, режим роботи: відправка POST & GET запитів
      Домовленість про формат txt файлів між клієнтом і серв
    IP
      Використов для унікальної ідентиф. комп. в мережі,
      глобальні адреси мереживого рівня, адреса компа в інтерн

    Що відбув коли відправл запит на серв:
      Спосіб спілкування з ресурсом в якого хочемо щось попросити
      Порти: 443, 80 https, http
      Браузер звертається до найближчого DNS серсера, яка айпі адреса відповідає
      доменному імені, отримавши айпі браузер відправл http запит через 80 порт, яка
      містить інфу як серверу відшукати папку чи док, сервер обробляє запит і поверт
      сторінку або файл, якщо невдача - код помилки
      Після того як встановлене tcp connection і якщо ми конектимся через https
      то відбув так зване рукостискання(обмін сертиф, перевірка достовірності, обмін ключами)
      встановл довірителн з'єдн на основі сертиф
      пілся того як все встановл ми переходимо до http заголовку(GET, POST, версія протоколу 1.0, 2.0)
      Після того отримуємо відповідь зі сторінкою, або код помилки, браузер починає
      парсити стр(html не париться в один прохід )
      Далі відбув відображення стр, клієнт взаємод зі стр

    ORM - Object Relational Mapp
      Django is a high-level Python-based free and open-source web framework,
      which follows the model-view-template (MVT) architectural pattern.
      It is maintained by the Django Software Foundation (DSF).
      Django's primary goal is to ease the creation of complex, database-driven websites.
      Some well-known sites that use Django include the Public Broadcasting Service,
      Instagram, Mozilla, The Washington Times, Disqus, Bitbucket, and Nextdoor.

    Cookie, csrf_token
      Http cookies
        The website puts a cookie on users hard drive that has
        its own unique identification code, the site uses this ID to keep track
        of your session, the session being overall visit on their website from
        start to finish, the reason is to keep track of things like which items
        you put in your shopping cart, or which items you looked at, so it can
        suggest similar items
      - Track users browsing aсtivity
      - Remembering login details
      - Track site visitor count(each cookie has its own unique ID)

      csrf_token
        User logs into his bank, the bank gives to user a session
        token, hacker send you an email with a malicious link,
        that lookes like it's pointing to some trusted location
        but really it connects to your bank. So when the user clicks
        on the fakelink, it uses the previously set session token,
        the hackers request is executed and users account is hacked
        csrf_token is like you give the invitation to guard
        and if everything is alright, the guard gives you a ticket
        to enter the shop
#-------------------------------------------------------------

STANDART LIBRARIES

  from datetime import date
  from datetime import time
  from datetime import datetime
  from datetime import timedelta
  import os

    for current_dir, dirs, files in os.walk('/home/sonysevent/Downloads'):
    print(current_dir, dirs, files)


    def main():
      today = date.today()
      print('Today\'s date is', today)
      print('Date components: ', today.day, today.month, today.year)
      print('Today\'s Weekday#: ', today.weekday())  # Mon: 0, Tue: 1, Wed: 2, Thu: 3, Fri: 4, Std: 5, Sun:6
      print('The current date and time is', datetime.now())
      print('Time is', datetime.time(datetime.now()))
      print(datetime.now().strftime('%Y-%m-%d/%a'))
      print('one year from now it will be:', str(datetime.now() + timedelta(days=365, weeks=1)))
      print('date 11 days before was', date.today() - timedelta(days=7))


  $String methods
    print('abc' in 'abcda')
    print('cabcd'.find('abc'))
    print('cabcd'.rfind('afc'))  reverse find()
    print('cabcd'.index('ab'))  # 1
    s = 'The man in black fled across the desert, and the gunslinder'
    print(s.startswith('The man in black'))  # True
    print(s_2.endswith('ak'))  # True
    print(s_3.count("acr"))
    print(s_4.lower())
    print(s_4.upper())
    print(s.replace(' ', ','))
    print(s.split(' '))
    '   spacious   '.strip()  # 'spacious'
    numbers = map(str, [1, 2, 3, 4, 5])
    print(', '.join(numbers))

  $re
    pattern = r'a[abc]c'
    string = 'aac, acc, aac'
    # match_object = re.match(pattern, string)
    # print(match_object)  # <re.Match object; span=(0, 3), match='aac'>
    # all_inclusions = re.findall(pattern, string)
    # print(all_inclusions)  # ['aac', 'acc', 'aac']
    fixed_typos = re.sub(pattern, 'abc', string)
    print(fixed_typos)  # abc, abc, abc
------------------------------------------------------------------------------------------------------

EXCEPTIONS
  def function(x, y):
    try:
      return x/y
    except (TypeError, ZeroDivisionError) as e:
      print(type(e))
      print(e)
      print(e.args)


  print(function(5, []))
  print(function(5, 0))


  def divide(x, y):
    try:
      result = x/y
      # e object
    except ArithmeticError:  # isinstance(e, ArithmeticError) == True
      print('arithmetic error')
    except ZeroDivisionError:  # no sense because we catch it above
      print('division by zero')
    else:
      print('result is', result)  # if no exceptions
    finally:
      print('finally')


  divide(2, 1)
  divide(2, 0)
  divide(2, [])

  print(ZeroDivisionError.mro())  # [<class 'ZeroDivisionError'>, <class 'ArithmeticError'>,
                                  # <class 'Exception'>,
                                  # <class 'BaseException'>, <class 'object'>]


  def greet(name):
    if name[0].isupper():
      return 'Hello, ' + name
    else:
      raise ValueError(name + ' inappropriate name')


  print(greet('Anton'))
  print(greet('anton'))
--------------------------------------------------------------------

OTHER
  chunk = 'я рюкзак'.encode('utf-8')/decode('utf-8')

  ~Тернарний оператор
    'even' if x%2 == 0 else 'odd'

  ~Named tuple
    Person = namedtuple('Person', ['name', 'age'])
    p = Person('George', age=77)

  ~Queue
    q = deque([1, 2], maxlen=2)  # q.appendleft(0); q.append(4); q.popleft()

  ~Присвоєння
    x = [1, 2, 3]
    y = x
    y.append(4)
    s = '123'
    t = s
    t = t + '4'
    
    print(str(x) + ' ' + s)  # [1, 2, 3, 4] 123
  
  ~Data types
    Immutable types = int, float, bool, str
    Ключами словника можуть бути тільки незмінні типи, бо у них не змінюється хеш
    Dynamic type(variables can change its value)
    арифметичні операц ==> рівності ==> логічні(not > and > or)
    1234e-2 = 1234 * 10**(-2)

    x = {1, 2, 3}  # x&y  # intersection
    y = {3, 4, 5}  # x|y  # union

    A = {"spam": 2, "ham":1, "eggs":3}
    b = list(A.values())  # [2, 1, 3]
    c = list(A.items())  # [('spam', 2), ('ham', 1), ('eggs', 3)]

    S = 'abcdefghijklmno'
    S[-3]  # 'm'
    S[1:10:2]  # 'bdfhj'

    class A():
   b = 4,

   def __init__(self, var):
       self.b = var


    object_ = A(12)  # <__main__.A object at 0x7f9f982e8d30>
    A.b = 14  # 14
-----------------------------------------------------------------------------------------
